# (순서X, 키 중복X, 수정O, 삭제O)

# 선언
a = {'name': 'kim', 'phone': '01012341234', 'birth': '041202'}
b = {0: 'hello Python'}
c = {'arr' : [1,2,3,4]}
d = {
    'name' : 'sim',
    'cithy' : 'Suwon',
    'age' : 20,
    'grade' : a
}
e = dict([
    ('name', 'sim'),
    ('cithy', 'Suwon')
])

f = dict(
    name='sim',
    city='suwon',
    age='20'
    )

print('a - ', type(a), a)
print('b - ', type(b), b)
print('c - ', type(c), c)
print('d - ', type(d), d)
print('e - ', type(e), e)
print('f - ', type(f), f)
print()

# 확실할 경우 get을 쓰지 않지만 확실하지 않은 경우 get을 쓴다
print('a - ', a['name']) # 존재X -> 에러 발생 
print('a - ', a.get('name')) # 존재X -> None 처리
print('b - ', b[0])
print('b - ', b.get(0))
print('f - ', f.get('city'))
print('f - ', f.get('age'))

# 딕셔너리 추가
a['address'] = 'seoul'
print('a - ', a)
a['rank'] = [1,2,3]
print('a - ',a)

print(len(a))

# 딕셔너리 함수 keys, values, items : 반복문(__iter__)에서 사용 가능
print('a - ', a.keys())
print('b - ', b.keys())
print('c - ', c.keys())
print('d - ', d.keys())

print('a - ', list(a.keys()))
print('b - ', list(b.keys()))

print('a - ', a.values())
print('b - ', b.values())
print('c - ', c.values())

print('a - ', list(a.values()))
print('b - ', list(b.values()))
print()

print('a - ', a.items())
print('b - ', b.items())
print('c - ', c.items())
print()

print('a - ', list(a.items()))
print('b - ', list(b.items()))
print()

print('a - ', c.pop('arr'))
print('a - ', c)
print()

print('f - ', f.popitem())
print('f - ', f)
print('f - ', f.popitem())
print('f - ', f)
print('f - ', f.popitem())
print('f - ', f)
print()

print('a - ', 'birth' in a)
print('d - ', 'age2' in d)

# 수정
a['test'] = 'test_dict'
print('a - ', a)

a['address'] = 'dg'
print('a - ', a)

a.update(birth='12345')
print('a - ', a)
temp = {'address': 'busan'}

a.update(temp)
print('a-', a)
