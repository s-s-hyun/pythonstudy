# 프로그래머가 이름을 통해서 정의 후 필요할 때마다 호출
# 반복 되는 코드를 한 번 구현 후 재사용 가능한 코드의 집합
# 함수 구현 -> 재사용, 루틴(프로시저, 서브루틴)

# 종류
# 1. 매개변수가 필요한 함수
# 2. 매개변수가 필요하지 않은 함수
# 3. 결과값을 반환하는 함수(return)
# 4. 결과값을 반환하지 않는 함수

# 매개변수가 필요하지 않은 함수
def function1():
    print('예제1 호출')

function1()

# 매개변수가 필요한 함수
def function2(a, b):
    print('예제2 호출', a,b)

function2(10, 20)

# 결과값을 반환하지 않는 함수
def function3(x, y):
    print('예제3 호출', x,y)

function3(100, 200)

# 결과값을 반환하는 함수
def function4(x, y):
    return x * y

function4(50, 50)
r = function4(50, 50)
print('예제4 호출', r)

# 튜플 리턴
def fun_1(q):
    q1 = q * 10
    q2 = q * 10
    q3 = q * 10
    return (q1, q2, q3)

w = fun_1(20)

print(type(w), w, list(w))

# 리스트 리턴
def fun_1(q):
    q1 = q * 10
    q2 = q * 20
    q3 = q * 30
    return [q1, q2, q3]

e = fun_1(30)

print(type(e), e, set(w))

# 딕셔너리 리턴
def fun_3(q):
    q1 = q * 10
    q2 = q * 20
    q3 = q * 30
    return {'v1':q1, 'v2':q2, 'v3':q3}

d = fun_3(30)

print(type(d), d, d.get('v2'), d.items(), d.keys())

# 중요
# *args, **kwargs

# *args(언팩킹)
def args_func(*args): # 매개변수 명은 자유
    for i, v in enumerate(args):
        print('Result : {}'.format(i), v)
    print('--------')

args_func('Lee')
args_func('Lee', 'Park')
args_func('Lee', 'Park', 'Kim')

# **kwargs(언팩킹)
def kwargs_func(**kwargs):
    for v in kwargs.keys():
        print("{}".format(v), kwargs[v])
    print('-----')

kwargs_func(name1 ='Lee')
kwargs_func(name1 ='Lee', name2 ='Park')
kwargs_func(name1 ='Lee', name2 ='Park', name3 ='Cho')

# 전체 혼합
def example(args_1, args_2, *args, **kwargs):
    print(args_1, args_2, args, kwargs)

example(10, 20, 'Lee',' Kim', 'Park', 'Cho', age1=20, age2=30, age3=40)

# 중첩함수

def nested_func(num):
    def func_in_func(num):
        print(num)
    print("In func")
    func_in_func(num + 100)

nested_func(100)

# 람다식 예제
# 메모리 절약, 가독성 향상, 코드 간결
# 함수는 객체 생성 -> 리소스(메모리) 할당
# 람다는 즉시 실행 함수(Heap 초기화) -> 메모리 초기화
# 과유불급

# 일반적함수 -> 할당
def mul_func(x, y):
    return x*y

q = mul_func(10,50)
print(q)

# print(mul_func(10,50))

mul_func_var = mul_func
print(mul_func_var(20,50))

# 람다 함수 -> 할당
lambda_mul_func = lambda x,y:x*y
print(lambda_mul_func(50,50))

def func_final(x,y, func):
    print(x*y*func(100,100))

func_final(10,20, lambda x,y:x*y)
